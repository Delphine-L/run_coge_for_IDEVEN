.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.13)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "CoGeX 3"
.TH CoGeX 3 "2015-05-06" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
CoGeX \- CoGeX
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&  use CoGeX;
\&  This object is the API to the CoGe genomes database.  It uses DBIx::Class for managing
\&  relationships and access to the database.  Various other "high\-level" functions are
\&  provided to make getting genomic data easier.
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Primary object for interacting with CoGe database system.
.SH "AUTHORS"
.IX Header "AUTHORS"
.Vb 2
\& Eric Lyons
\& Brent Pedersen
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
The full text of the license can be found in the
\&\s-1LICENSE\s0 file included with this module.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.SS "dbconnect"
.IX Subsection "dbconnect"
.Vb 7
\& Usage     : use CoGeX;
\&             my $coge = CoGeX\->dbconnect;
\& Purpose   : generates the CoGeX API object
\& Returns   : CoGeX object
\& Argument  : none
\& Throws    : none
\& Comments  :
.Ve
.PP
See Also   :
.SS "get_features_in_region"
.IX Subsection "get_features_in_region"
.Vb 5
\& Usage     : $object\->get_features_in_region(start   => $start,
\&                                             stop    => $stop,
\&                                             chr     => $chr,
\&                                             ftid    => $ftid,
\&                                             dataset_id => $dataset\->id(),);
\&
\& Purpose   : gets all the features in a specified genomic region
\& Returns   : an array or an array_ref of feature objects (wantarray)
\& Argument  : start   => genomic start position
\&             stop    => genomic stop position
\&             chr     => chromosome
\&             dataset_id => dataset id in database (obtained from a
\&                        CoGe::Dataset object)
\&                        of the dna seq will be returned
\&             OPTIONAL
\&             count   => flag to return only the number of features in a region
\&             ftid    => limit features to those with this feature type id
\& Throws    : none
\& Comments  :
.Ve
.PP
See Also   :
.SS "count_features_in_region"
.IX Subsection "count_features_in_region"
.Vb 4
\& Usage     : $object\->count_features_in_region(start   => $start,
\&                                             stop    => $stop,
\&                                             chr     => $chr,
\&                                             dataset_id => $dataset\->id());
\&
\& Purpose   : counts the features in a specified genomic region
\& Returns   : an integer
\& Argument  : start   => genomic start position
\&             stop    => genomic stop position
\&             chr     => chromosome
\&             dataset_id => dataset id in database (obtained from a
\&                        CoGe::Dataset object)
\&                        of the dna seq will be returned
\& Throws    : none
\& Comments  :
.Ve
.PP
See Also   :
