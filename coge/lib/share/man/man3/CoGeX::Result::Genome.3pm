.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.13)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "CoGeX::Result::Genome 3"
.TH CoGeX::Result::Genome 3 "2015-05-06" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
CoGeX::Genome
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This object uses the DBIx::Class to define an interface to the \f(CW\*(C`genome\*(C'\fR table in the CoGe database.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SH "USAGE"
.IX Header "USAGE"
.Vb 1
\& use CoGeX;
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "to_*"
.IX Subsection "to_*"
.Vb 6
\& Usage     :
\& Purpose   :
\& Returns   :
\& Argument  :
\& Throws    :
\& Comments  :
.Ve
.PP
See Also   :
.SS "lists"
.IX Subsection "lists"
.Vb 6
\& Usage     : $self\->lists
\& Purpose   : Get lists that contain this genome
\& Returns   : array or array ref of parent lists
\& Argument  :
\& Throws    :
\& Comments  :
.Ve
.PP
See Also   :
.SS "datasets"
.IX Subsection "datasets"
.Vb 6
\& Usage     :
\& Purpose   :
\& Returns   :
\& Argument  :
\& Throws    :
\& Comments  :
.Ve
.PP
See Also   :
.SS "get_genomic_sequence"
.IX Subsection "get_genomic_sequence"
.Vb 6
\& Usage     :
\& Purpose   :
\& Returns   :
\& Argument  :
\& Throws    :
\& Comments  :
.Ve
.PP
See Also   :
.SS "sequence_length"
.IX Subsection "sequence_length"
.Vb 7
\& Usage     : my $last = $genome_seq_obj\->sequence_length($chr);
\& Purpose   : gets the last genomic sequence position for a dataset given a chromosome
\& Returns   : an integer that refers to the last position in the genomic sequence refered
\&             to by a dataset given a chromosome
\& Argument  : string => chromsome for which the last position is sought
\& Throws    :
\& Comments  :
.Ve
.PP
See Also   :
.SS "sequence_type"
.IX Subsection "sequence_type"
.Vb 6
\& Usage     :
\& Purpose   :
\& Returns   :
\& Argument  :
\& Throws    :
\& Comments  :
.Ve
.PP
See Also   :
.SS "type"
.IX Subsection "type"
.Vb 6
\& Usage     :
\& Purpose   :
\& Returns   :
\& Argument  :
\& Throws    :
\& Comments  :
.Ve
.PP
See Also   :
.SS "get_chromosomes"
.IX Subsection "get_chromosomes"
.Vb 6
\& Usage     :
\& Purpose   :
\& Returns   :
\& Argument  :
\& Throws    :
\& Comments  :
.Ve
.PP
See Also   :
.SS "chromosomes"
.IX Subsection "chromosomes"
.Vb 6
\& Usage     :
\& Purpose   :
\& Returns   :
\& Argument  :
\& Throws    :
\& Comments  :
.Ve
.PP
See Also   :
.SS "percent_gc"
.IX Subsection "percent_gc"
.Vb 6
\& Usage     :
\& Purpose   :
\& Returns   :
\& Argument  :
\& Throws    :
\& Comments  :
.Ve
.PP
See Also   :
.SS "fasta"
.IX Subsection "fasta"
.Vb 11
\& Usage     :
\& Purpose   :
\& Returns   :
\& Argument  :
\&            col      =>   number of sequence characters per line (default 100)
\&            chr_name =>   fasta header contains only the chromosome name (default 0)
\&            start    =>  start position (default 1)
\&            stop     =>  stop position  (default $self\->sequence_legnth($chr)
\&            chr      =>  chromosome for which to get sequence (default:  whatever $self\->get_chromosomes gets first)
\&            rc       =>  generate the reverse complement (default: 0)
\&            prot     =>  translate to protein, will do 6 frame automatically if it is not in a proper reading frame (default: 0)
\&
\& Throws    :
\& Comments  :
.Ve
.PP
See Also   :
.SS "gff"
.IX Subsection "gff"
.Vb 12
\& Usage     : $dsg\->gff(print=>1)
\& Purpose   : generating a gff file for a genome from all the datasets it contains
\& Returns   : a string
\& Argument  : name_re     =>    regular expression for only displaying features containing a name that matches
\&             print       =>    print the gff file as the lines are retrieved
\&             annos       =>    print annotations as well (takes longer)
\&             cds         =>    Only print CDS gene features (skip all ncRNA and other features).  Will print genes, mRNA, and CDS entries
\&             id_type     =>    Specify if the GFF entry IDs are going to be unique numbers or unique names.
\&             unique_parent_annotations => Flag to NOT print redundant annotations in children entries.  E.g. if parent has an annotation, a child will not have that annotation
\&             name_unique =>   Flag for specifying that the name tag of an entry will be unique
\& Throws    :
\& Comments  :
.Ve
.PP
See Also   : dataset\->gff
.SS "trans_type"
.IX Subsection "trans_type"
.Vb 1
\& Usage     :
\&
\& Purpose   :
\& Returns   :
\& Argument  :
\& Throws    :
\& Comments  :
.Ve
.PP
See Also   :
.SS "length"
.IX Subsection "length"
.Vb 6
\& Usage     : $self\->length
\& Purpose   : get total length of sequence in dataset group
\& Returns   : number
\& Argument  :
\& Throws    :
\& Comments  :
.Ve
.PP
See Also   :
.SS "chromosome_count"
.IX Subsection "chromosome_count"
.Vb 6
\& Usage     : $self\->chromosome_count
\& Purpose   : get count of chromosomes in the dataset group
\& Returns   : number
\& Argument  :
\& Throws    :
\& Comments  :
.Ve
.PP
See Also   :
.SS "features"
.IX Subsection "features"
.Vb 6
\& Usage     : $self\->features
\& Purpose   : run through associated datasets and get their features
\& Returns   : array of feature objects
\& Argument  :
\& Throws    :
\& Comments  :
.Ve
.PP
See Also   :
.SS "info"
.IX Subsection "info"
.Vb 2
\& Usage     : $self\->info
\& Purpose   : returns a string of information about the genome.
\&
\& Returns   : returns a string
\& Argument  : none
\& Throws    :
\& Comments  : To be used to quickly generate a string about the genome
.Ve
.PP
See Also   :
.SS "info_html"
.IX Subsection "info_html"
.Vb 7
\& Usage     :
\& Purpose   : provides quick information about the genome wrapped with a link to LIstView
\& Returns   : a string
\& Argument  :
\& Throws    :
\& Comments  : name, description, restricted, type
\&           :
.Ve
.PP
See Also   :
.SS "date"
.IX Subsection "date"
.Vb 6
\& Usage     :
\& Purpose   : returns load data from first dataset entry
\& Returns   : a string
\& Argument  :
\& Throws    :
\& Comments  :
.Ve
.PP
See Also   :
.SH "AUTHORS"
.IX Header "AUTHORS"
.Vb 3
\& Eric Lyons
\& Brent Pedersen
\& Daniel Hembry
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.
.PP
The full text of the license can be found in the
\&\s-1LICENSE\s0 file included with this module.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
