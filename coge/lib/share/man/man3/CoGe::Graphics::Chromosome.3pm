.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.13)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "CoGe::Graphics::Chromosome 3"
.TH CoGe::Graphics::Chromosome 3 "2015-05-06" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
CoGe::Graphics::Chromosome \- Object for drawing chromosomes that provides functionality for painting chromosomes with location based features (such as genes), and printing pictures of chromosomes as pngs.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  #!/usr/bin/perl \-w
\&
\&  use strict;
\&
\&  use CoGe::Graphics::Chromosome;
\&  use CoGe::Graphics::Feature::Gene;
\&  use CoGe::Graphics::Feature::NucTide;
\&
\&  #create a chromosome object;
\&  my $c = CoGe::Graphics::Chromosome\->new();
\&  #set the size of the chromosome in nucleotides
\&  $c\->set_region(start=>1, stop=>100000);
\&
\&  #create a gene feature that will be added to the chromosome
\&  #this feature object inherits from the base class CoGe::Graphics::Feature which
\&  #provides the basic ties for generating features on the chromosome.  The base class
\&  #can be used alone and custom features designed ad hoc.  Addionally, you can create
\&  #a new feature class by inheriting from the base class and designing you own custom
\&  #drawing routines.  Please see CoGe::Graphics::Feature for details and refer to
\&  #CoGe::Graphics::Feature::Gene and others for examples.
\&
\&  my $f = CoGe::Graphics::Feature::Gene\->new();
\&  #set the strand of the feature
\&  $f\->strand("\-1");
\&  #add some segments for the gene (start and end locations are nucleotide positions)
\&  $f\->add_segment(start=>8000, end=>9000);
\&  $f\->add_segment(start=>9100, end=>9300);
\&  $f\->add_segment(start=>9400, end=>9600);
\&  $f\->add_segment(start=>9700, end=>9800);
\&  $f\->add_segment(start=>10000, end=>10500);
\&  $f\->add_segment(start=>11000, end=>12000); #feature goes off region, but no worries!
\&  #give the feature a label
\&  $f\->label("My special gene")
\&  #set the color of the feature (an array ref of RGB values where each is between 0 and 255)
\&  $f\->color([255,0,0]); #RED!
\&  #set the display order of the feature on the chromosome.  "1" is closest to the center of the chromosome
\&  $f\->order(1);
\&
\&  #add the feature to the chromosome
\&  $c\->add_feature($f);
\&
\&  #next, let\*(Aqs add some nucleotide sequence data and use the Feature::NucTide object.
\&  #Remember, this object inherits from CoGe::Graphics::Feature, but has some special
\&  #attributes and functionality to draw individual nucleotides in the background image
\&  #of the chromosome.  Refer to its documentation for more information
\&
\&  #First, we\*(Aqll need to get some DNA sequence covering the region of interest.  This is
\&  #NOT a subroutine of this object and is mearly provided to fill in code.
\&  my $seq = get_dna_sequence(); #returns a string of DNA sequence (ATCGTC...) for the region
\&
\&  my $seq_len = length $seq;
\&  my $chrs = int (($c\->region_length)/$c\->iw); #number of characters to use per pixel
\&  $chrs = 1 if $chrs < 1;
\&  my $pos = 0; #position in sequence string
\&  while ($pos < $seq_len)my $ i = 0;
\&   {
\&     my $subseq = substr ($seq, $pos, $chrs);
\&     my $rcseq = substr ($seq, $pos, $chrs);
\&     $rcseq =~ tr/ATCG/TAGC/;
\&     next unless $subseq && $rcseq;
\&     my $f1 = CoGe::Graphics::Feature::NucTide\->new({nt=>$subseq, strand=>1, start =>$pos+1, options=>"gc"});
\&     my $f2 = CoGe::Graphics::Feature::NucTide\->new({nt=>$rcseq, strand=>\-1, start =>$pos+1, options=>"gc"});
\&     $f1\->show_label(1);
\&     $f2\->show_label(1);
\&     $c\->add_feature($f1) if $f1;
\&     $c\->add_feature($f2) if $f2;
\&     $pos+=$chrs;
\&   }
\&
\&  #set to "1" to print labels of features;
\&  $c\->feature_labels(0);
\&
\&  #turn on the flag for printing labels of the nucleotides (which are "fill" type features)
\&  $c\->fill_labels(1);
\&
\&   $c\->generate_png(file=>"tmp/test$i.png");
\&
\&  #you are finished!
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The overall goal of this object is to create an easy-to-use thingie (\s-1TM\s0) for generating images
of chromosomes on which enlightening \*(L"features\*(R" (genes, functional domains, expression data,
whatever) are painted with the use of \s-1MINIMAL\s0 \s-1PROGRAMMING\s0 and dependencies, yet perserving as
much flexibility as possible so that the final image was fully customizable for advanced and
patient programmers.
.PP
Simply put, after working with existing genomics visualization tools and libraries written
in \s-1PERL\s0, I felt that something new was needed.  Most of the existing tools were often hard to
work with, required vast knowledge of many other modules, and were rather inflexible towards
customization.  I wanted a module that would allow me to navigate a chromsome with as much ease
as Google Maps(tm) allowed me to navigate my local neighborhood, plop tags at specific
locales, and zoom in on things of interest.
.PP
To this end, I hope this package helps others create views of genomes with the features
and patterns they find interesting.
.PP
The specific aims of this package is to:
.PP
1. Create an object that represents a chromsome
.PP
2. Allow features (also objects) to easily be added/painted on to the chromosome
.PP
4. Gives the user power to customize many aspects of the final image if desired.
.SH "USAGE"
.IX Header "USAGE"
.Vb 2
\& use CoGe::Graphics::Chromsome;
\& my $c = CoGe::Graphics::Chromosome\->new();
.Ve
.SH "BUGS"
.IX Header "BUGS"
.SH "SUPPORT"
.IX Header "SUPPORT"
Please contact Eric Lyons with questions, comments, suggestions, and most importantly code
improvements.
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 2
\&        Eric Lyons
\&        elyons@nature.berkeley.edu
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Permission to use, copy, modify, and distribute this software and its documentation for educational, research, and not-for-profit purposes, without fee and without a signed licensing agreement, is hereby granted, provided that the above copyright notice, this paragraph and the following two paragraphs appear in all copies, modifications, and distributions. Contact The Office of Technology Licensing, \s-1UC\s0 Berkeley, 2150 Shattuck Avenue, Suite 510, Berkeley, \s-1CA\s0 94720\-1620, (510) 643\-7201, for commercial licensing opportunities.
.PP
The full text of the license can be found in the
\&\s-1LICENSE\s0 file included with this module.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIperl\fR\|(1).
.SS "new"
.IX Subsection "new"
.Vb 8
\& Usage     : my $c = CoGe::Graphics::Chromosome\->new()
\& Purpose   : Creates a Chromsome object and set up the default parameters
\& Returns   : a CoGe::Graphics::Chromosome object
\& Argument  : Currently no paramters can be passed in and used to set the defaults.
\&             However, you can use the objects Accessor functions to override the defaults
\& Throws    : None
\& Comment   : This is the mama\-jama new.  If you don\*(Aqt know new, then you need to read up
\&           : on object oriented programming
.Ve
.PP
See Also   :
.SS "accessor methods"
.IX Subsection "accessor methods"
.Vb 4
\& These methods are provided by Class::Accessor and are used to get and set a variety of parameters
\& used by the Chromosome object.  Each method is listed and described along with the default values
\& set during when new is called.  Many of the defaults can be changed easily by looking at the
\& BEGIN block of the module and finding the appropriate global variable.
\&
\& DEBUG            =>    (DEFAULT: 0) When set to 1, this will cause the object to print debugging
\&                         messages
\&
\& benchmark        =>    (DEFAULT: 0) Output benchmarking on image generation
\&
\& region_start     =>    starting position of the chromosome (USER SPECIFIED)
\& alias: start
\&
\& region_stop      =>    stopping position of the chromosome (USER SPECIFIED)
\& alias: stop
\&
\& draw_chromosome  =>    (DEFAULT: 1) Flag (0 or 1) for whether or not the chromosome is
\&                        drawn on the final image
\& draw_ruler       =>    (DEFAULT: 1) Flag (0 or 1) for whether or not the positional ruler
\&                        is drawn on the image
\& draw_chr_end     =>    (DEFAULT: 1) Flag (0 or 1) for whether or not the rounded ends of the chromosome
\&                        are drawn where appropriate
\& feature_height   =>    Height of a feature in pixels.  (Default: 20).  This is used if automatic zoom
\&                        is not used
\&
\& ruler_color      =>    (DEFAULT: [0,0,255]) Defines the color of the positional ruler.
\&                        This is the an array reference of three values
\&                        that corresponds to RGB color values.  Each color ranges from 0\-255
\& tick_color       =>    (DEFAULT: [0,0,255]) Defines the color of ticks on the  positional ruler.
\&                        This is the an array reference of three values
\&                        that corresponds to RGB color values.  Each color ranges from 0\-255
\& ruler_height     =>    (DEFAULT: 20)  The heigth, in pixels of the positional ruler
\&
\& major_tick_labels=>    Options for drawing major tick lables.  1 draws them above the tick, \-1 draws them below the tick,
\&                        0 for not drawing tick labels.  (DEFAULT: \-1)
\&
\& minor_tick_labels=>    Options for drawing minor tick lables.  1 draws them above the tick, \-1 draws them below the tick,
\&                        0 for not drawing tick labels.  (DEFAULT: 0)
\&
\& chr_height       =>    (DEFAULT: 30)  This is the number, in pixels, of the starting height of the
\&                        chromosome before adjustments for featurs are made
\&
\& image_width      =>    (DEFAULT: 200) The width in pixels of the final image.
\& alias:  iw
\&
\& image_height     =>    This holds the height of the image and is a value that is calculated
\&                        dynamically by the module (sub set_image_height) when the image is
\&                        generated.  IMPORTANT:  THIS VALUE SHOULD NOT BE MODIFIED BY THE USER
\&                        DIRECTLY.  One thing to keep in mind is that, the height of the
\&                        chromosomal images are dynamic.  This is due to the factors such as the
\&                        number and scaling aspects of features on the chromosome,and
\&                        customize the final height of the image by specifying the scaling factors
\&                        and heights of the various image parts, but it is not recommended to
\&                        change this value as strange(tm) things may happen.
\& alias:  ih
\&
\& padding         =>     (DEFAULT: 15) This is the padding (in pixels) used between most items
\&                        drawn on the final image.
\&
\& font            =>     (DEFAULT: "/usr/lib/perl5/site_perl/CoGe/fonts/arial.ttf")
\&                        This is the path to a true\-type font used for text labels on the image
\&
\& feature_labels  =>     (DEFAULT: 0) Flag used for whether or not to print feature labels.
\&
\& fill_labels     =>     (DEFAULT: 1) Flag used for whether or not to print "fill" features labels.
\&                        A "fill feature" is one that is used to fill in a region on the chromosome
\&                        and is distinct from regular features.  An example of this would be
\&                        the CoGe::Graphics::Feature::NucTide object with, by default, is a fill
\&                        feature.  This means that when one of these features is drawn, it fills
\&                        in the background area of the chromosome over the region is covers.  The
\&                        resulting image will then have individual regions of the chromsome colored
\&                        according the nucleotide composition and thus generates an easily viewed
\&                        image.
\&
\& chr_inner_color =>     (DEFAULT: [220,255,220]) Defines the interior color of the chromosome.
\&                        This is the an array reference of three values
\&                        that corresponds to RGB color values.  Each color ranges from 0\-255
\&
\& chr_outer_color =>     (DEFAULT: [0,0,0]) Defines the border color of the chromosome.
\&                        This is the an array reference of three values
\&                        that corresponds to RGB color values.  Each color ranges from 0\-255
\&
\& invert_chromosome  =>  Draw the chromosome such that it has been inverted 5\*(Aq => 3\*(Aq
\&
\& overlap_adjustment =>  flag for whether overlapping features are rescaled and position such that
\&                        they don\*(Aqt overlap when the image is generated.  Default: 1
\&
\& skip_duplicate_features => flag for whether to skip two featrues if they are identical.  Default: 0
\&
\& draw_hi_qual       =>  (DEFAULT: 0)This flag determines if the high quality mapping function for drawing features
\&                        on the chromosome is used or the low quality mapping.  The cost, of course, is
\&                        speed (roughly twice as long for high quality).  Overall, there is only minor difference
\&                        between hi qual and low qual images
\&
\& top_padding        =>  (DEFAULT: 0) Amount of whitespace padding added to the top of the final image.
.Ve
.SS "set_region"
.IX Subsection "set_region"
.Vb 8
\& Usage     : $c\->set_region(start=>$start, stop=>$stop);
\& Purpose   : This routine sets the region by define region_start and region_stop
\& Returns   : none
\& Argument  : hash with at least one key\-value pair for "start"
\&             accepts "start", "begin", "START", "BEGIN" to specify the beginning of the region
\&             accepts "stop", "end", "STOP", "END" to specify the end of the region
\&             Nominally, the values should be integers the correspond to a chromosomal location.
\& Throws    : None
.Ve
.SS "add_feature"
.IX Subsection "add_feature"
.Vb 10
\& Usage     : $c\->add_feature($feat_obj);
\& Purpose   : This method adds features to the chromosome.
\&           : Features represent anything that you want to draw on the chromosome and some
\&           : common examples are genes, mRNAs, nucleotides, etc.
\& Returns   : a warning if a feature is not a Feature object (ref($feat) =~ /Feature/)
\& Argument  : an array or array ref of CoGe::Graphics::Feature objects or child\-class objects
\& Throws    : warning
\& Comment   : A few defaults will be set in the feature if they haven\*(Aqt been set:
\&           : strand         => 1
\&           : fill           => 0
\&           : fill_height    => 1
\&           : stop           => start
\&           : merge_perecent => 100
\&           : magnification  => 1
\&           : overlay        => 1
\&           : mag            => 1
\&           : layer          => 1
\&           : type           => "unknown"
\&           : Also, the feature\*(Aqs GD object will be initialized upon import.
\&           : There is a check for whether the added feature overlaps other features.
\&           : If so, a counter, $feat\->_overlap is incemented in the feature object.
\&           : This is later used by the $self\->_draw_feature algorithm to figure
\&           : out how to best draw overlapping features.  The overlap check is skipped
\&           : unless $self\->overlap_adjustment is true.
\&See Also   : CoGe::Graphics::Feature
.Ve
.SS "delete_feature"
.IX Subsection "delete_feature"
.Vb 6
\& Usage     : $c\->delete_featuer($feat);
\& Purpose   : deletes a feature from the chromosome graphics object
\& Returns   : nothing
\& Argument  : a CoGe::Graphics::Feature object or derivative object
\& Throws    :
\& Comment   : Features are stored in a complex hash for quick and speedy retrieval
.Ve
.PP
See Also   :
.SS "delete_features"
.IX Subsection "delete_features"
.Vb 8
\& Usage     : $c\->delete_features(\*(Aqnt\*(Aq);
\& Purpose   : Deletes features from the object by the type of feature
\& Returns   : none
\& Argument  : string or none
\&               all (or blank) => deletes all the features
\&               <name of feature type> => e.g. "gene", "tRNA", "aa", "nt", etc.  depends on what feature derivatives used
\& Throws    :
\& Comment   :
.Ve
.SS "get_features"
.IX Subsection "get_features"
.Vb 10
\& Usage     : my @fill_feats = $c\->get_features(fill=>1, strand=>1);
\& Purpose   : find features that meet specific criteria such as their strand, type, order and fill
\& Returns   : an array or array ref based on wantarray
\& Argument  : optional hash with the following keys:
\&           : order => get features that are on that order.  Order is the order by which features
\&                      are drawn on the chromosome.  order=>1 is for features to be drawn closest
\&                      to the center of the chromosome.  order=>2 is for the next layer of
\&                      features, etc.
\&             type  => get features whose type match this value
\&             strand=> get features from that strand (1, \-1, +, \-) etc.
\&                      this just searches for matching on "\-"
\&             fill  => get "fill features".  Fill features are those feature that are drawn to
\&                      "fill in" a region on a chromsome.  An example of this would be a
\&                      nucleotide where you would want to color an entire region of the chromosome
\&                      for a specific nucleotide.
\&             start => get features that start at this position
\&             stop  => get features that stop at this position
\&             last_order => flag for retrieving only the feature with the highest order
\&             overlay    => get features at a particular overlay level
\& Throws    : none
\& Comment   : This is mostly used internally, but is provided in case you want to retrieve a
\&           : feature that was previously added
.Ve
.PP
See Also   : CoGe::Graphics::Feature
.SS "get_feature"
.IX Subsection "get_feature"
.Vb 1
\& Purpose   : alias for get_features
.Ve
.SS "get_feats"
.IX Subsection "get_feats"
.Vb 1
\& Purpose   : alias for get_features
.Ve
.SS "generate_png"
.IX Subsection "generate_png"
.Vb 10
\& Usage     : $c\->generate_png(file=>$file_name); #generates THE png by name $file_name
\&             $c\->generate_png();  #generates THE png to STDOUT
\& Purpose   : This generates the picture of the chromosome!
\& Returns   : none
\& Argument  : optional hash where:
\&             file => is the path for the output png
\& Throws    : none
\& Comment   : This routine calls the method generate_region to render the image in GD
\&           : and then calls GD\->png to generate the png.  You may wish to generate the
\&           : picture in another format or do additional modifications on the GD object.
\&           : If so, you can call generate_region and then access the gd object direcly.
\&           : When this routine is finished, the gd object is cleared (set to undef) so
\&           : that the same object may be used again to generate another image
\&See Also   :
.Ve
.SS "generate_region"
.IX Subsection "generate_region"
.Vb 12
\& Usage     : $c\->generate_region
\& Purpose   : Initializes the GD object and creates the image in GD
\& Returns   : none
\& Argument  : none
\& Throws    : none
\& Comment   : This is the necessary method to call to actually initialize the GD object and create
\&           : the image.  It calls (in order):
\&             set_image_height (to calculate the height of the image)
\&             _draw_ruler      (to generate the ruler at the top of the image)
\&             _draw_chromosome (to generate the chromosome image)
\&             _draw_features   (add features to the image)
\&See Also   :
.Ve
.SS "generate_imagemap"
.IX Subsection "generate_imagemap"
.Vb 10
\& Usage     : $c\->generate_imagemap
\& Purpose   : Generates an image for the features on the chromosome
\& Returns   : html image map string
\& Argument  : mapname => name of the image map to use the HTML tag: <map name="mapname">
\& Throws    : none
\& Comment   : This is also designed to use a javascript function called "change" to display
\&           : information stored in the feature object description accessor function
\&             ($feat\->description)in a textarea box.  For example:
\&           : <script type="text/javascript">
\&             function change( info ) {  document.info.info.value = info }
\&             </script>
\&             <FORM NAME="info"><TEXTAREA NAME="info" cols=50 rows=12></TEXTAREA></FORM>
\&             Will cause the textarea to change to the features description as the mouse
\&             is moved over the feature on the image.
\&             Also, this usll generate a link in the imagemap using the URI stored in the
\&             feature\*(Aqs link accessor function ($feat\->link)
\&             The alt field is the label of the feature.
\&
\&             Example line from the imagemap:
\&             <area coords="562,220,663,227" href="annotation_lookup.pl?id=At1g79180.1" onMouseOver="change(\*(AqLocus: At1g79180.1\*(Aq)"  alt="ID:At1g79180.1">
\&
\&           : NOTE: Currently skips filled features
\&See Also   : CoGe::Graphics::Feature
.Ve
.SS "gd"
.IX Subsection "gd"
.Vb 8
\& Usage     : my $gd = $c\->gd;
\& Purpose   : initializes (if needed) and returns the GD object
\& Returns   : GD object
\& Argument  : none
\& Throws    : none
\& Comment   : This checks to see if a gd object has been previously created and stored
\&           : in $self\->_gd.  If not, it creates the GD object using $self\->image_width
\&           : and $self\->image_height for dimensions.
.Ve
.PP
See Also   : \s-1GD\s0 (which is an excellent module to know if you need to generate images)
.SS "get_color"
.IX Subsection "get_color"
.Vb 10
\& Usage     : my $color_index = $c\->get_color([0,0,0]);
\& Purpose   : gets the color index from the GD object for your specified color
\& Returns   : a GD color index (integer?)
\& Argument  : an array or array ref of three to four integers between 0 and 255
\& Throws    : this will return the index of the default color $DEFAULT_COLOR if no color
\&           : is specified or it was passed the wrong number of arguments
\& Comment   : If three arguments are passed in, GD\->colorResolve is called.
\&           : If four arguments are passed in, the forth is assumed to be an alpha channel
\&           : and GD\->colorAllocateAlpha is called.
\&See Also   : GD
.Ve
.SS "set_image_height"
.IX Subsection "set_image_height"
.Vb 12
\& Usage     : $c\->set_image_height
\& Purpose   : This routine figures out how tall the final image will be and sets
\&             $self\->image_height with that value.  The height of the image depends on
\&             a number of factors including feature height, the number
\&             type and placement of features, the height of the positional ruler, the padding
\&             between picture elements, etc.
\& Returns   : none
\& Argument  : none
\& Throws    : none
\& Comment   : This is called internally when generate_region is called.  This must be called
\&           : before the GD object is created internally by $self\->gd in order for the correct
\&             image height to be passed to the GD object during creation
.Ve
.PP
See Also   : \f(CW$self\fR\->gd
.SS "chr_brush"
.IX Subsection "chr_brush"
.Vb 12
\& Usage     : my $chr_brush = $c\->chr_brush
\& Purpose   : returns a GD object that is used to generate the border of the chromsome
\& Returns   : a GD object
\& Argument  : none, but uses $self\->chr_outer_color and $self\->chr_inner_color to figure out the
\&             colors needed for the GD image
\& Throws    : none
\& Comment   : This routine generates a GD object that is used to paint the border of the
\&           : chromosome.  It makes a smooth blend from the interior color to the exterior color
\&           : of the chromosome.  The actual obejct is stored in $self\->_chr_brush.  If that
\&           : exists, that object is returned, otherwise a GD object is create, the image
\&           : generated, the object store in $self\->_chr_brush, and then returned.
\&See Also   : Accessor functions $self\->chr_outer_color, $self\->chr_inner_color
.Ve
.SS "region_length"
.IX Subsection "region_length"
.Vb 7
\& Usage     : my $length = $self\->region_length()
\& Purpose   : returns the length of the chromosomal region
\& Returns   : int
\& Argument  : none
\& Throws    : none
\& Comment   : return the value of $self\->region_stop \- $self\->region_start + 1;
\&           :
.Ve
.PP
See Also   :
.SS "chr_length"
.IX Subsection "chr_length"
.Vb 2
\& Usage     : my $length = $c\->chr_length
\& Purpose   : alias for region_length
.Ve
.SS "_invert_chromosome"
.IX Subsection "_invert_chromosome"
.Vb 7
\& Usage     : $c\->_invert_chromosome
\& Purpose   : makes up\->down, down\->up, etc.
\& Returns   :
\& Argument  :
\& Throws    :
\& Comment   : Should not be called directly.  Set invert_chromosome flag to 1 and this will be called by _draw_features
\&           :
.Ve
.PP
See Also   :
.SS "_check_overlap"
.IX Subsection "_check_overlap"
.Vb 10
\& Usage     : $self\->_check_overlap($feature);
\& Purpose   : This internal method is called by $self\->add_feature in determine if the
\&           : being added overlaps another feature on the same strand, order, overlay level, and fill
\&           : type.  If so, it increments an internal counter in both features called
\&           : _overlap. A positional counter called _overlap_pos is incremented in the feature
\&           : being searched.  This counter is later used by $self\->_draw_feature to
\&           : determine the appropriate way to draw the overlapping features
\& Returns   : none
\& Argument  : a CoGe::Graphics::Feature object
\& Throws    : none
\& Comment   : this algorithm can get slow with lots of features and doing an overlap search.
\&           : The overlap search algorithm is a linear search through all previously entered features
\&             for any that overlap the newly added feature.  This can probably go faster with a different
\&             algo.
.Ve
.PP
See Also   : \f(CW$self\fR\->\fIadd_feature()\fR;
.SS "_draw_chromosome"
.IX Subsection "_draw_chromosome"
.Vb 10
\& Usage     : $c\->_draw_chromosome
\& Purpose   : this internal routine draws the chromosome picture if $self\->draw_chromosome is true
\& Returns   : none
\& Argument  : none
\& Throws    : none
\& Comment   : This routine will generate the chromsome background picture as well as calculating
\&           : the center and height of the chromosome picture.  These latter values are important
\&           : for the drawing of features.  This method is called internally by
\&           : $self\->generate_region
\&See Also   :
.Ve
.SS "_draw_chr_end"
.IX Subsection "_draw_chr_end"
.Vb 10
\& Usage     : $c\->_draw_chr_end (x=>$x_pos, dir=>"left", y=>$y_pos)
\& Purpose   : this internal method draws a semi\-circle end to the chromosome picture (if needed)
\& Returns   : none
\& Argument  : hash of key\-value pairs where:
\&             x   => is the x coordinate and where the open half of the semi\-circle should lie
\&             y   => is the y coordinate and the center of the chromosome
\&             dir => (\*(Aqleft\*(Aq or \*(Aqright\*(Aq) for which end of the chromosome this will lie
\& Throws    : none
\& Comment   : this is called internall by $self\->_draw_chromosome
\&           :
.Ve
.PP
See Also   :
.SS "_draw_features"
.IX Subsection "_draw_features"
.Vb 9
\& Usage     : $self\->_draw_features
\& Purpose   : this routine parses all the feature objects store internally, determines all the
\&           : necessary positional information for where they are to be drawn, and sents the
\&           : information to $self\->_draw_feature for rendering
\& Returns   : none
\& Argument  : none
\& Throws    : none
\& Comment   : Has an internal method to skip rendering features that are not within the visable
\&           : window
.Ve
.PP
See Also   : \f(CW$self\fR>_draw_feature for individual feature rendering
           : \f(CW$self\fR\->add_feature for adding features
           : \f(CW$self\fR\->get_feature for retrieving features
.SS "_draw_feature"
.IX Subsection "_draw_feature"
.Vb 10
\& Usage     : $self\->_draw_feature(feat=>$feat, \*(Aqy\*(Aq=>$y, ih=>$feat_h, \*(Aqsy\*(Aq=>$sy);
\& Purpose   : draws a feature at specific y axis position with a particular height
\& Returns   : 0 if a valid feature object was not specified
\& Argument  : hash of key value pairs where the keys are:
\&              feat         => (or "FEAT", "f") a CoGe::Graphics::Feature object
\&              image_height => (or "ih", "IH", or takes height from feature object) the height
\&                              at which the feature will be drawn
\&              y            => (or "Y") the y axis position from which the feature will be drawn
\&              string_y     => (or "sy") the y axis position from which the feature label will
\&                              be drawn if the chromosome object permits the drawing of labels.
\&                              (As determined from $self\->feature_labels and $self\->fill_labels)
\& Throws    : 0 if a valid feature object was not specified
\& Comment   : This uses GD\->copyResampled to resample the gd image from the feature object onto
\&           : the chromosome gd objects.  The feature height is determined by either a specified
\&             parameter or by the feature object.  The width of the feature is calculated based
\&             on the chromosomal location of the feature (usually in nucleotides).  Together
\&             this easily allows for the generation of a feature image on the chromosome image
\&             that scales smoothly at the requested magnification.  This routine is called by
\&             $self\->_draw_features
.Ve
.PP
See Also   : \f(CW$self\fR\->_draw_features
.SS "_calc_unit_size"
.IX Subsection "_calc_unit_size"
.Vb 7
\& Usage     : my $unit = $self\->_calc_unit_size();
\& Purpose   : returns the width, in pixels, of one chromsomal unit (usually nucleotides)
\& Returns   : an number
\& Argument  : none
\& Throws    : none
\& Comment   : formula is image_width/visable_region_size (nt)
\&           :
.Ve
.PP
See Also   :
.SS "_draw_ruler"
.IX Subsection "_draw_ruler"
.Vb 7
\& Usage     : $self\->_draw_ruler;
\& Purpose   : generates the positional ruler at the top of the image
\& Returns   : none
\& Argument  : none
\& Throws    : none
\& Comment   :
\&           : called by $self\->generate_region
.Ve
.PP
See Also   :
.SS "_make_ticks"
.IX Subsection "_make_ticks"
.Vb 10
\& Usage     : $self\->_make_ticks(scale=>1000, y1=>$y1, y2=>$y2, range_begin=>1, range_end=>10000)
\& Purpose   : generate tick marks of height ($y2\-$y1) using the range positions and the scale
\&           : to calcualte where the ticks should be.
\& Returns   : none
\& Argument  : hash of key\-value pairs where keys are:
\&              y1   => starting y axis position of tick
\&              y2   => ending y axis position of tick
\&              range_begin => number representing the starting point of the ruler
\&              range_end   => number representing the ending poitn of the ruler
\&              scale       => points along the range at which to generate a tick mark
\& Throws    : 0
\& Comment   : This method will convert numbers drawn at the tick marks to use
\&              "K" if the number ends in 000
\&              "M" if the nubmer ends in 000000
\&              "G" if the number ends in 000000000
\&           : This method also generates ticks that are the size of one chromsomal unit
\&             (usually nucleotides) if the magnification is high enough.
\&           : This method is called by $self\->_generate_ruler
\&See Also   :
.Ve
.SS "_gd_string"
.IX Subsection "_gd_string"
.Vb 10
\& Usage     : $self\->_gd_string(text=>$text, x=>$x, y=>$y, $size=>$size);
\& Purpose   : generate a string with gd for some text at some position specified
\&           : by x, y coordinates.
\& Returns   : none
\& Argument  : hash of key\-value pairs where keys are:
\&              text    =>   text to be printed
\&              x       =>   x axis coordiate
\&              y       =>   y axis coordiate
\&              color   =>   (Optional) an array refof three integers between 1\-255
\&                           This method calls $self\->get_color to get the color from GD
\&                           and will return the default color if none was specified
\&              size    =>   For true type fonts, this will be the size of the font
\&              angle   =>   For true type fonts, this will be the angle offset for the font
\& Throws    : 0 and a warning if X and Y are not defined
\& Comment   : This will check to see if the file is readable as specified by $self\->font.
\&           : If so, it will assume that file to be a true type font and use file in a call to
\&             GD\->stringTF.  Otherwise, it will fallback on the global variable $FONT for the
\&             default GD font to use (GD::Font\->MediumBold)
.Ve
.PP
See Also   : \s-1GD\s0
.SS ""
.IX Subsection ""
.Vb 7
\& Usage     :
\& Purpose   :
\& Returns   :
\& Argument  :
\& Throws    :
\& Comment   :
\&           :
.Ve
.PP
See Also   :
