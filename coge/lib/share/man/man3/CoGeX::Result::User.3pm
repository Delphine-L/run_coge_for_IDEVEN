.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.13)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "CoGeX::Result::User 3"
.TH CoGeX::Result::User 3 "2015-05-06" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
CoGeX::User
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This object uses the DBIx::Class to define an interface to the \f(CW\*(C`user\*(C'\fR table in the CoGe database.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SH "USAGE"
.IX Header "USAGE"
.Vb 1
\&  use CoGeX;
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "generate_passwd"
.IX Subsection "generate_passwd"
.Vb 6
\& Usage     :
\& Purpose   : Generates a password based on a hashed string and a salt value.
\& Returns   : Hash of password and salt value.
\& Argument  : \*(Aqpasswd\*(Aq or \*(Aqpwd\*(Aq
\& Throws    : None
\& Comments  :
.Ve
.PP
See Also   : \fIcheck_passwd()\fR
.SS "check_passwd"
.IX Subsection "check_passwd"
.Vb 6
\& Usage     :
\& Purpose   : Checks to see if entered password matches user password.
\& Returns   : Result of logic test \*(Aqeq\*(Aq between password has from the database and a hash of the user supplied password.
\& Argument  : \*(Aqpasswd\*(Aq or \*(Aqpwd\*(Aq
\& Throws    : None
\& Comments  :
.Ve
.PP
See Also   : \fIgenerate_passwd()\fR
.SS "name"
.IX Subsection "name"
.Vb 6
\& Usage     :
\& Purpose   : alias for $self\->user_name
\& Returns   : string
\& Argument  :
\& Throws    : None
\& Comments  :
.Ve
.SS "user_groups"
.IX Subsection "user_groups"
.Vb 6
\& Usage     :
\& Purpose   : Returns the set of groups a user belongs to
\& Returns   : Array of Groups
\& Argument  : None
\& Throws    : None
\& Comments  :
.Ve
.SS "collaborators"
.IX Subsection "collaborators"
.Vb 6
\& Usage     :
\& Purpose   : return user\*(Aqs collaborators
\& Returns   : wantarray of user objects
\& Argument  :
\& Throws    : None
\& Comments  :
.Ve
.SS "is_admin"
.IX Subsection "is_admin"
.Vb 6
\& Usage     : $self\->is_admin
\& Purpose   : determine if a user is an admin
\& Returns   : 1 if an admin, 0 if not
\& Argument  :
\& Throws    : None
\& Comments  :
.Ve
.SS "has_access_to_..."
.IX Subsection "has_access_to_..."
.Vb 6
\& Usage     :
\& Purpose   : checks to see if a user has access to a ...
\& Returns   : 1/0
\& Argument  : None
\& Throws    : None
\& Comments  :
.Ve
.SS "is_owner"
.IX Subsection "is_owner"
.Vb 8
\& Usage     : $self\->(dsg=>$dsg)
\& Purpose   : checks to see if a user is the owner of a genome or dataset or list
\& Returns   : 1/0
\& Argument  : dsg=>genome object
\&             ds=>dataset object
\&             list=>list object
\& Throws    : None
\& Comments  :
.Ve
.SS "is_editor"
.IX Subsection "is_editor"
.Vb 8
\& Usage     : $self\->(dsg=>$dsg)
\& Purpose   : checks to see if a user is the editor of a genome or dataset or list
\& Returns   : 1/0
\& Argument  : dsg=>genome object
\&             ds=>dataset object
\&             list=>list object
\& Throws    : None
\& Comments  :
.Ve
.SS "is_owner_editor"
.IX Subsection "is_owner_editor"
.Vb 8
\& Usage     : $self\->(dsg=>$dsg)
\& Purpose   : checks to see if a user is the owner/editor of a genome or dataset or list
\& Returns   : 1/0
\& Argument  : dsg=>genome object
\&             ds=>dataset object
\&             list=>list object
\& Throws    : None
\& Comments  :
.Ve
.SS "is_reader"
.IX Subsection "is_reader"
.Vb 8
\& Usage     : $self\->(dsg=>$dsg)
\& Purpose   : checks to see if a user is the reader of a genome or dataset or list
\& Returns   : 1/0
\& Argument  : dsg=>genome object
\&             ds=>dataset object
\&             list=>list object
\& Throws    : None
\& Comments  :
.Ve
.SS "is_role"
.IX Subsection "is_role"
.Vb 11
\& Usage     : $self\->(dsg=>$dsg)
\& Purpose   : checks to see if a user has given role in relation to given group/genome/dataset/list/experiment
\& Returns   : 1/0
\& Argument  : role => "owner","editor","reader"
\&                         group => user group object
\&             dsg => genome object
\&             ds => dataset object
\&             list => list object
\&             experiment => experiment object
\& Throws    : None
\& Comments  :
.Ve
.SS "datasets"
.IX Subsection "datasets"
.Vb 6
\& Usage     :
\& Purpose   : Returns the set of datasets a user has access to
\& Returns   : Array of datasets
\& Argument  : None
\& Throws    : None
\& Comments  :
.Ve
.SS "restricted_datasets"
.IX Subsection "restricted_datasets"
.Vb 6
\& Usage     :
\& Purpose   : Returns the set of restricted datasets a user has access to
\& Returns   : Array of datasets
\& Argument  : None
\& Throws    : None
\& Comments  :
.Ve
.SS "lists"
.IX Subsection "lists"
.Vb 6
\& Usage     : $self\->lists
\& Purpose   : shows the lists to which user has access
\& Returns   : wantarray of list objects
\& Argument  :
\& Throws    : None
\& Comments  :
.Ve
.SS "experiments"
.IX Subsection "experiments"
.Vb 6
\& Usage     : $self\->experiments
\& Purpose   : Return set of experiments to which user has access
\& Returns   : wantarray of experiment objects
\& Argument  :
\& Throws    : None
\& Comments  :
.Ve
.SS "restricted_experiments"
.IX Subsection "restricted_experiments"
.Vb 6
\& Usage     : $self\->restricted_experiments
\& Purpose   : Return set of restricted experiments to which user has access
\& Returns   : wantarray of experiment objects
\& Argument  :
\& Throws    : None
\& Comments  :
.Ve
.SS "genomes"
.IX Subsection "genomes"
.Vb 6
\& Usage     : $self\->genomes
\& Purpose   : Get list of genomes to which user has access
\& Returns   : wantarray of genome objects
\& Argument  :
\& Throws    : None
\& Comments  :
.Ve
.SS "restricted_genomes"
.IX Subsection "restricted_genomes"
.Vb 6
\& Usage     :
\& Purpose   : Returns the set of restricted genomes a user has access to
\& Returns   : Array of genomes
\& Argument  : None
\& Throws    : None
\& Comments  :
.Ve
.SS "features"
.IX Subsection "features"
.Vb 6
\& Usage     : $self\->features
\& Purpose   : shows the features to which user has access
\& Returns   : wantarray of features objects
\& Argument  :
\& Throws    : None
\& Comments  :
.Ve
.SS "history"
.IX Subsection "history"
.Vb 6
\& Usage     : $self\->history
\& Purpose   : get the user\*(Aqs history
\& Returns   : wantarray or count of history objects
\& Argument  :
\& Throws    : None
\& Comments  :
.Ve
.SS "info"
.IX Subsection "info"
.Vb 6
\& Usage     : $self\->info
\& Purpose   : generate a string of information about the user
\& Returns   : a string
\& Argument  : None
\& Throws    : None
\& Comments  : uses name, description and role
.Ve
.SH "AUTHORS"
.IX Header "AUTHORS"
.Vb 3
\& Eric Lyons
\& Brent Pedersen
\& Matt Bomhoff
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.
.PP
The full text of the license can be found in the
\&\s-1LICENSE\s0 file included with this module.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
