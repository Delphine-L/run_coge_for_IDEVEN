.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.13)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "CoGe::Algos::KsCalc 3"
.TH CoGe::Algos::KsCalc 3 "2015-05-06" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
CoGe::Algos::KsCalc \- CoGe::Algos::KsCalc
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use CoGe::Algos::KsCalc;
\&
\&  my $ks = CoGe::Algos::KsCalc\->new ();
\&
\&  $ks\->feat1($coge_feat1);  #a CoGeX::Feature object of type CDS
\&  $ks\->feat2($coge_feat2);  #a CoGeX::Feature object of type CDS
\&
\&  my $res = $ks\->KsCalc("seq.align");
\&  print "Ka = ", $res\->{\*(AqdN\*(Aq},"\en";
\&  print "Ks = ", $res\->{\*(AqdS\*(Aq},"\en";
\&  print "Ka/Ks = ", $res\->{\*(AqdN/dS\*(Aq},"\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Inherets from CoGe::Algos::Pairwise and provides extended funcitonality
to calculate Ks Kd (synonymous and nonsynonymous substitution rates) from sequences
in the CoGeX database.  Calculations are performed by Codeml of \s-1PAML\s0
(Phylogenetic Analysis by Maximum Likelihood) package of Ziheng Yang.  See
http://abacus.gene.ucl.ac.uk/software/paml.html for more information.
.PP
This object is to make it easy to calculate Ks and Ka values from the genomes database
for any feature that has a protein sequence and a name.
.PP
It procedure is:
1. for each sequence name, find the longest protein sequence assoicate with that name
2. align those sequences using a global pairwise alignment algorithm (default parameters
   set in CoGe::Algos::Pairwise)
3. remove gaps from alignment
4. generate corresponding \s-1DNA\s0 sequence from gapless protein alignment
5. run Codeml using Comp_Geomics::Algos::Codeml
6. store results in \f(CW$self\fR\->results as a hash returned from CoGe::Algos::Codeml
   (see example above)
.SH "USAGE"
.IX Header "USAGE"
.SH "BUGS"
.IX Header "BUGS"
.SH "SUPPORT"
.IX Header "SUPPORT"
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 4
\&        Eric Lyons
\&        CPAN ID: MODAUTHOR
\&        UC Berkeley
\&        elyons(@t)nature.berkeley.edu
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This program is free software licensed under the...
.PP
.Vb 1
\&        The Artistic License
.Ve
.PP
The full text of the license can be found in the
\&\s-1LICENSE\s0 file included with this module.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIperl\fR\|(1).
.SS "new"
.IX Subsection "new"
.Vb 7
\& Usage     : my $ks = new CoGe::Algos::KsCalc
\& Purpose   : creates a KsCalc object
\& Returns   : KsCalc object
\& Argument  : none
\& Throws    : none
\& Comment   :
\&           :
.Ve
.PP
See Also   :
.SS "Class::Accessor functions"
.IX Subsection "Class::Accessor functions"
This is a list of the Class::Accessor functions and the information they hold:
version          Version of the data source to limit search when finding sequences
                 for sequence names.  This is in the data_information table of
                 the genomes database
name1            The name of one of the sequences in the genomes database for which
                 a sequence is to be searched
name2            The name of one of the sequences in the genomes database for which
                 a sequence is to be searched
prot1            Storage for the protein sequence for name1
prot2            Storage for the protein sequence for name2
palign1          Storage for the protein alignment for prot1 after alignment
palign2          Storage for the protein alignment for prot2 after alignment
dna1             Storage for the dna sequence for name1
dna2             Storage for the dna sequence for name2
gaplessP1        Storage for the gapless alignment of palign1
gaplessP2        Storage for the gapless alignment of palign2
gaplessD1        Storage for the gapless alignment of dna1 based on gaplessP1
gaplessD2        Storage for the gapless alignment of dna2 based on gaplessP2
results          Storage for the results hash for the Ks calculation by codeml
.PP
feat1            Storage for CoGeX feature object for feature 1
feat2            Storage for CoGeX feature object for feature 2
.SS "init"
.IX Subsection "init"
.Vb 2
\& Usage     : $self\->init (called by new)
\& Purpose   : create and set default parameters.  Currently, sets tmpdir to /tmp/
\&
\& Returns   : none
\& Argument  : none
\& Throws    : none
\& Comment   :
\&           :
.Ve
.PP
See Also   :
.SS "palign"
.IX Subsection "palign"
.Vb 9
\& Usage     : $ks\->palign
\& Purpose   : after the names have been set, generates the global alignment
\&             ($self\->global_align inhereted from Pairwise) and saves the aligned
\&             sequences in $self\->palign1 and $self\->palign2
\& Returns   : 1 if successful, 0 if not
\& Argument  : none
\& Throws    : 0
\& Comment   :
\&           :
.Ve
.PP
See Also   :
.SS "gapless_DNA_calc_pid"
.IX Subsection "gapless_DNA_calc_pid"
.Vb 8
\& Usage     : my $pid = $ks\->gapless_DNA_calc_pid();
\& Purpose   : Calculates the percent identity between the two stored aligned gapless nucleotide aligned sequences
\& Returns   : pid a number between 0 and 100, no cropping of significant figures
\& Argument  : none
\& Throws    : undef + errors to STDOUT if either sequence is not defined
\& Comment   : calls $self\->calc_pid
\&           :
\&See Also   : calc_pid
.Ve
.SS "gapless_prot_calc_pid"
.IX Subsection "gapless_prot_calc_pid"
.Vb 8
\& Usage     : my $pid = $ks\->gapless_prot_calc_pid();
\& Purpose   : Calculates the percent identity between the two stored aligned gapless protein aligned sequences
\& Returns   : pid a number between 0 and 100, no cropping of significant figures
\& Argument  : none
\& Throws    : undef + errors to STDOUT if either sequence is not defined
\& Comment   : calls $self\->calc_pid
\&           :
\&See Also   : calc_pid
.Ve
.SS "DNA_calc_pid \*(-- \s-1NOT\s0 \s-1IMPLEMENTED\s0!"
.IX Subsection "DNA_calc_pid  NOT IMPLEMENTED!"
.Vb 8
\& Usage     : my $pid = $ks\->DNA_calc_pid();
\& Purpose   : Calculates the percent identity between the two stored aligned nucleotide aligned sequences
\& Returns   : pid a number between 0 and 100, no cropping of significant figures
\& Argument  : none
\& Throws    : undef + errors to STDOUT if either sequence is not defined
\& Comment   : calls $self\->calc_pid
\&           :
\&See Also   : calc_pid
.Ve
.SS "prot_calc_pid"
.IX Subsection "prot_calc_pid"
.Vb 8
\& Usage     : my $pid = $ks\->prot_calc_pid();
\& Purpose   : Calculates the percent identity between the two stored aligned protein aligned sequences
\& Returns   : pid a number between 0 and 100, no cropping of significant figures
\& Argument  : none
\& Throws    : undef + errors to STDOUT if either sequence is not defined
\& Comment   : calls $self\->calc_pid
\&           :
\&See Also   : calc_pid
.Ve
.SS "calc_pid"
.IX Subsection "calc_pid"
.Vb 9
\& Usage     : my $pid = $ks\->calc_pid($seq1, $seq2);
\& Purpose   : Calculates the percent identity between two sequence
\& Returns   : pid a number between 0 and 100, no cropping of significant figures
\& Argument  : two strings (two sequences)
\& Throws    : undef + errors to STDOUT if either sequence is not defined or
\&             if the sequences are not of equal length
\& Comment   : The calculation of Num_identical_charaters / total_Num_characters
\&           : uses all non\-gap characters from the $seq1 to calculate total_Num_characters
\&See Also   :
.Ve
.SS "KsCalc"
.IX Subsection "KsCalc"
.Vb 10
\& Usage     : $self\->KsCalc
\& Purpose   : runs $self\->palign and runs Codeml from
\&             CoGe::Algos::Codeml and saves the results in
\&             $self\->results
\& Returns   : hash ref of results:
\&             \*(AqdN/dS\*(Aq => non\-synonymous over sysnonymous substitution
\&             \*(AqdN\*(Aq    => non\-synonymous substitution
\&             \*(AqdS\*(Aq    => synonymous substitution
\&             \*(AqpID\*(Aq   => percent identical
\& Argument  : none
\& Throws    : 0 if there was a problem running alignment
\& Comment   : This is the mama\-jama of this module
\&           :
.Ve
.PP
See Also   :
.SS "phylip_align"
.IX Subsection "phylip_align"
.Vb 10
\& Usage     : $self\->phylip_align(\*(Aqdna\*(Aq)
\& Purpose   : generates a phylip format alignment of the gapless sequences
\&             default is to generate the dna gapless alignment, but
\&             you can specify \*(Aqprot\*(Aq as an argument and the gapless protein
\&             alignment will be generated
\& Returns   : a string
\& Argument  : optional (\*(Aqprot\*(Aq | \*(Aqdna\*(Aq) default is \*(Aqdna\*(Aq
\& Throws    : none
\& Comment   : this is used to generate the alignment file that Codeml uses
\&           : for its Ks calculation
.Ve
.PP
See Also   :
.SS "_check_seqs"
.IX Subsection "_check_seqs"
.Vb 7
\& Usage     : $self\->_check_seqs
\& Purpose   : gets the protein and dna sequences for the names
\& Returns   : 1 if successful for getting all four sequences, 0 otherwise
\& Argument  : none
\& Throws    : 0
\& Comment   : used internally
\&           :
.Ve
.PP
See Also   :
.SS "_generate_gapless"
.IX Subsection "_generate_gapless"
.Vb 9
\& Usage     : $self\->_generate_gapless
\& Purpose   : called to generate the gapless alignments of the protein
\&             and dna sequences as determined by the aligned protein
\&             sequences.  This sets $self\->gapless(P1|P2|D1|D3)
\& Returns   : none
\& Argument  : none
\& Throws    : none
\& Comment   :
\&           :
.Ve
.PP
See Also   :
