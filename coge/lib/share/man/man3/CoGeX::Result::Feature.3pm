.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.13)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "CoGeX::Result::Feature 3"
.TH CoGeX::Result::Feature 3 "2015-05-06" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
CoGeX::Feature
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This object uses the DBIx::Class to define an interface to the \f(CW\*(C`feature\*(C'\fR table in the CoGe database.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Has columns:
\&\f(CW\*(C`feature_id\*(C'\fR (Primary Key)
Type: \s-1INT\s0, Default: undef, Nullable: no, Size: 11
.PP
\&\f(CW\*(C`feature_type_id\*(C'\fR
Type: \s-1INT\s0, Default: 0, Nullable: no, Size: 11
.PP
\&\f(CW\*(C`dataset_id\*(C'\fR
Type: \s-1INT\s0, Default: 0, Nullable: no, Size: 11
.PP
\&\f(CW\*(C`start\*(C'\fR
Type: \s-1INT\s0, Default: 0, Nullable: yes, Size: 11
.PP
\&\f(CW\*(C`stop\*(C'\fR
Type: \s-1INT\s0, Default: 0, Nullable: yes, Size: 11
.PP
\&\f(CW\*(C`strand\*(C'\fR
Type: \s-1TINYINT\s0, Default: 0, Nullable: yes, Size: 4
.PP
\&\f(CW\*(C`chromosome\*(C'\fR
Type: \s-1VARCHAR\s0, Default: 0, Nullable: yes, Size: 255
.PP
Belongs to CCoGeX::Result::FeatureType> via \f(CW\*(C`feature_type_id\*(C'\fR
Belongs to CCoGeX::Result::Dataset> via \f(CW\*(C`dataset_id\*(C'\fR
.PP
Has many CCoGeX::Result::FeatureName> via \f(CW\*(C`feature_id\*(C'\fR
Has many CCoGeX::Result::FeatureAnnotation> via \f(CW\*(C`feature_id\*(C'\fR
Has many CCoGeX::Result::Location> via \f(CW\*(C`feature_id\*(C'\fR
.SH "USAGE"
.IX Header "USAGE"
.Vb 1
\&  use CoGeX;
.Ve
.SH "AUTHORS"
.IX Header "AUTHORS"
.Vb 2
\& Eric Lyons
\& Brent Pedersen
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
The full text of the license can be found in the
\&\s-1LICENSE\s0 file included with this module.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.SS "type"
.IX Subsection "type"
.Vb 7
\& Usage     : $returned_featuretype_object = $FeatureObject\->type();
\& Purpose   : Shortcut to return a FeatureType object from a Feature object.
\& Returns   : A FeatureType object.
\& Argument  : None
\& Throws    :
\& Comments  :
\&           :
.Ve
.PP
See Also   :
.SS "genomes"
.IX Subsection "genomes"
.Vb 7
\& Usage     : $returned_genome_objecst = $FeatureObject\->genomes();
\& Purpose   : Shortcut to return dataset group objects from a Feature object.
\& Returns   : A Genome object. (array or array ref depending on wantarray
\& Argument  : None
\& Throws    :
\& Comments  :
\&           :
.Ve
.PP
See Also   : \fIorg()\fR
.SS "organism"
.IX Subsection "organism"
.Vb 7
\& Usage     : $returned_organism_object = $FeatureObject\->organism();
\& Purpose   : Shortcut to return an Organism object (name, description, normalized name) from a Feature object.
\& Returns   : An Organism object.
\& Argument  : None
\& Throws    :
\& Comments  :
\&           :
.Ve
.PP
See Also   : \fIorg()\fR
.SS "org"
.IX Subsection "org"
.Vb 7
\& Usage     :
\& Purpose   : Alias to the organism() method.
\& Returns   : See organism()
\& Argument  : None
\& Throws    :
\& Comments  :
\&           :
.Ve
.PP
See Also   : \fIorganism()\fR
.SS "annotations"
.IX Subsection "annotations"
.Vb 7
\& Usage     :
\& Purpose   : Alias to the feature_annotations() method.
\& Returns   : See feature_annotations()
\& Argument  : None
\& Throws    :
\& Comments  :
\&           :
.Ve
.PP
See Also   : \fIfeature_annotations()\fR
.SS "names"
.IX Subsection "names"
.Vb 7
\& Usage     :
\& Purpose   :
\& Returns   :
\& Argument  :
\& Throws    :
\& Comments  :
\&           :
.Ve
.PP
See Also   :
.SS "primary_name"
.IX Subsection "primary_name"
.Vb 7
\& Usage     :
\& Purpose   :
\& Returns   :
\& Argument  :
\& Throws    :
\& Comments  :
\&           :
.Ve
.PP
See Also   :
.SS "locs"
.IX Subsection "locs"
.Vb 7
\& Usage     :
\& Purpose   :
\& Returns   :
\& Argument  :
\& Throws    :
\& Comments  :
\&           :
.Ve
.PP
See Also   :
.SS "eannotations"
.IX Subsection "eannotations"
.Vb 7
\& Usage     :
\& Purpose   :
\& Returns   :
\& Argument  :
\& Throws    :
\& Comments  :
\&           :
.Ve
.PP
See Also   :
.SS "annos"
.IX Subsection "annos"
.Vb 7
\& Usage     :
\& Purpose   :
\& Returns   :
\& Argument  :
\& Throws    :
\& Comments  :
\&           :
.Ve
.PP
See Also   :
.SS "length"
.IX Subsection "length"
.Vb 7
\& Usage     :
\& Purpose   :
\& Returns   :
\& Argument  :
\& Throws    :
\& Comments  :
\&           :
.Ve
.PP
See Also   :
.SS "annotation_pretty_print"
.IX Subsection "annotation_pretty_print"
.Vb 8
\& Usage     : my $pretty_annotation = $feat\->annotation_pretty_print
\& Purpose   : returns a string with information and annotations about a feature
\&             in a nice format with tabs and new\-lines and the like.
\& Returns   : returns a string
\& Argument  : none
\& Throws    :
\& Comments  : uses Coge::Genome::Accessory::Annotation to build the annotations,
\&           : specifying delimters, and printing to string.   Pretty cool object.
.Ve
.PP
See Also   : CoGe::Genome::Accessory::Annotation
.SS "annotation_pretty_print_html"
.IX Subsection "annotation_pretty_print_html"
.Vb 8
\& Usage     : my $pretty_annotation_html = $feat\->annotation_pretty_print_html
\& Purpose   : returns a string with information and annotations about a feature
\&             in a nice html format with breaks and class tags (called "annotation")
\& Returns   : returns a string
\& Argument  : none
\& Throws    :
\& Comments  : uses Coge::Genome::Accessory::Annotation to build the annotations,
\&           : specifying delimters, and printing to string.   Pretty cool object.
.Ve
.PP
See Also   : CoGe::Accessory::Annotation
.SS "genbank_location_string"
.IX Subsection "genbank_location_string"
.Vb 9
\& Usage     : my $genbank_loc = $feat\->genbank_location_string
\& Purpose   : generates a genbank location string for the feature in genomic coordinates or
\&           : based on a recalibration number that is user specified
\&           : e.g.: complement(join(10..100,200..400))
\& Returns   : a string
\& Argument  : hash:  recalibrate => number of positions to subtract from genomic location
\& Throws    : none
\& Comments  :
\&           :
.Ve
.PP
See Also   :
.SS "chr"
.IX Subsection "chr"
.Vb 2
\& Usage     : my $chr = $feat\->chr
\& Purpose   : alias for $feat\->chromosome
.Ve
.SS "version"
.IX Subsection "version"
.Vb 7
\& Usage     : my $version = $feat\->version
\& Purpose   : return the dataset version of the feature
\& Returns   : an integer
\& Argument  : none
\& Throws    : none
\& Comments  : returns $self\->dataset\->version
\&           :
.Ve
.PP
See Also   :
.SS "genomic_sequence"
.IX Subsection "genomic_sequence"
.Vb 6
\& Usage     : my $genomic_seq = $feat\->genomic_sequence
\& Purpose   : gets the genomic seqence for a feature
\& Returns   : a string
\& Argument  : none
\& Comments  :
\&See Also   : CoGe
.Ve
.SS "has_genomic_sequence"
.IX Subsection "has_genomic_sequence"
.Vb 7
\& Usage     :
\& Purpose   :
\& Returns   :
\& Argument  :
\& Throws    :
\& Comments  :
\&           :
.Ve
.PP
See Also   :
.SS "blast_bit_score"
.IX Subsection "blast_bit_score"
.Vb 9
\& Usage     : my $bit_score = $feature\->blast_bit_score();
\& Purpose   : returns the blast bit score for the feature\*(Aqs self\-self identical hit
\& Returns   : an int \-\- the blast bit score
\& Argument  : optional hash
\&             match    => the score for a nucleotide match. DEFAULT: 1
\&             mismatch => the score for a nucleotide mismatch.  DEFAULT: \-3
\& Throws    :
\& Comments  :
\&           :
.Ve
.PP
See Also   :
.SS "_estimate_lambda"
.IX Subsection "_estimate_lambda"
.Vb 10
\& Usage     : my $lambda = $feature\->_estimate_lambda
\& Purpose   : estimates lambda for calculating blast bit scores.  Lambda is
\&             a matrix\-specific constant for normalizing raw blast scores
\& Returns   : a number, lambda
\& Argument  : optional hash
\&             match    => the score for a nucleotide match. DEFAULT: 1
\&             mismatch => the score for a nucleotide mismatch.  DEFAULT: \-3
\&             precision=> the different between the high and low estimate
\&                         of lambda before lambda is returned.
\&                         DEFAULT: 0.001
\& Throws    : a warning if there is a problem with the calcualted expected_score
\&             or the match score is less than 0;
\& Comments  : Assumes an equal probability for each nucleotide.
\&           : this routine is based on example 4\-1 from
\&           : BLAST: An essential guide to the Basic Local Alignment Search Tool
\&           : by Korf, Yandell, and Bedell published by O\*(AqReilly press.
.Ve
.PP
See Also   :
.SS "reverse_complement"
.IX Subsection "reverse_complement"
.Vb 7
\& Usage     :
\& Purpose   :
\& Returns   :
\& Argument  :
\& Throws    :
\& Comments  :
\&           :
.Ve
.PP
See Also   :
.SS "reverse_comp"
.IX Subsection "reverse_comp"
.Vb 7
\& Usage     :
\& Purpose   : See reverse_complement()
\& Returns   :
\& Argument  :
\& Throws    :
\& Comments  : Alias for the reverse_complement function.
\&           :
.Ve
.PP
See Also   : \fIreverse_complement()\fR
.SS "protein_sequence"
.IX Subsection "protein_sequence"
.Vb 7
\& Usage     :
\& Purpose   :
\& Returns   :
\& Argument  :
\& Throws    :
\& Comments  :
\&           :
.Ve
.PP
See Also   :
.SS "frame6_trans"
.IX Subsection "frame6_trans"
.Vb 7
\& Usage     :
\& Purpose   :
\& Returns   :
\& Argument  :
\& Throws    :
\& Comments  :
\&           :
.Ve
.PP
See Also   :
.SS "genetic_code"
.IX Subsection "genetic_code"
.Vb 7
\& Usage     :
\& Purpose   :
\& Returns   :
\& Argument  :
\& Throws    :
\& Comments  :
\&           :
.Ve
.PP
See Also   :
.SS "_process_seq"
.IX Subsection "_process_seq"
.Vb 7
\& Usage     :
\& Purpose   :
\& Returns   :
\& Argument  :
\& Throws    :
\& Comments  :
\&           :
.Ve
.PP
See Also   :
.SS "percent_translation_system"
.IX Subsection "percent_translation_system"
.Vb 7
\& Usage     :
\& Purpose   :
\& Returns   :
\& Argument  :
\& Throws    :
\& Comments  :
\&           :
.Ve
.PP
See Also   :
.SS "aa_frequency"
.IX Subsection "aa_frequency"
.Vb 7
\& Usage     :
\& Purpose   :
\& Returns   :
\& Argument  :
\& Throws    :
\& Comments  :
\&           :
.Ve
.PP
See Also   :
.SS "codon_frequency"
.IX Subsection "codon_frequency"
.Vb 7
\& Usage     :
\& Purpose   :
\& Returns   :
\& Argument  :
\& Throws    :
\& Comments  :
\&           :
.Ve
.PP
See Also   :
.SS "gc_content"
.IX Subsection "gc_content"
.Vb 7
\& Usage     :
\& Purpose   :
\& Returns   :
\& Argument  :
\& Throws    :
\& Comments  :
\&           :
.Ve
.PP
See Also   :
.SS "percent_gc"
.IX Subsection "percent_gc"
.Vb 7
\& Usage     :
\& Purpose   : See gc_content()
\& Returns   :
\& Argument  :
\& Throws    :
\& Comments  : Alias for the gc_content() method.
\&           :
.Ve
.PP
See Also   : \fIgc_content()\fR
.SS "wobble_content"
.IX Subsection "wobble_content"
.Vb 7
\& Usage     :
\& Purpose   :
\& Returns   :
\& Argument  :
\& Throws    :
\& Comments  :
\&           :
.Ve
.PP
See Also   :
.SS "fasta"
.IX Subsection "fasta"
.Vb 7
\& Usage     :
\& Purpose   : returns a fasta formated sequence for the featre
\& Returns   :
\& Argument  :
\& Throws    :
\& Comments  :
\&           :
.Ve
.PP
See Also   :
.SS "sequence_type"
.IX Subsection "sequence_type"
.Vb 8
\& Usage     :
\& Purpose   : returns the genomic_sequence_type object for the sequence
\& Returns   : wantarray \-\- may be more than one genomic_sequence_type sequences associated with this feature
\&             looked up through dataset\->genome_connector\->genome\->genomic_sequence_type
\& Argument  :
\& Throws    :
\& Comments  :
\&           :
.Ve
.PP
See Also   :
.SS "info"
.IX Subsection "info"
.Vb 2
\& Usage     : $self\->info
\& Purpose   : returns a string of information about the feature.
\&
\& Returns   : returns a string
\& Argument  : none
\& Throws    :
\& Comments  : To be used to quickly generate a string about the feature
.Ve
.PP
See Also   :
.SS "clean_locations"
.IX Subsection "clean_locations"
.Vb 2
\& Usage     : $self\->clean_locations
\& Purpose   : returns wantarray of location objects.  Checks them for consistency due to some bad loads where locations had bad starts, stops, chromosomes and strands
\&
\& Returns   : returns wantarray of location ojects
\& Argument  : none
\& Throws    :
\& Comments  :
.Ve
.PP
See Also   :
