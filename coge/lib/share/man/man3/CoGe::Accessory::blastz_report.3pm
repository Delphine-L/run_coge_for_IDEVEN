.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.13)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "CoGe::Accessory::blastz_report 3"
.TH CoGe::Accessory::blastz_report 3 "2015-05-06" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SS "new"
.IX Subsection "new"
.Vb 7
\& Usage     : my $blastz_report = new CoGe::Accessory::blastz_report($blastz_file);
\& Purpose   : parse a blastz report, generate this object
\& Returns   : a blastz_report object
\& Argument  : a string that points to a blastz file
\& Throws    : lots of errors and warnings if the blastz file is missing or can\*(Aqt be read
\& Comment   :
\&           :
.Ve
.PP
See Also   :
.SS "matrix string"
.IX Subsection "matrix string"
.Vb 11
\& Usage     : my $matrix = $blastz\->matrix_string();
\& Purpose   : generates a string of the matrix used
\& Returns   : a string
\& Argument  : none (blastz file is parsed during object creation)
\& Throws    :
\& Comment   : Example file:
\&        A       C       G       T
\&A       91      \-114    \-31     \-123
\&C       \-114    100     \-125    \-31
\&G       \-31     \-125    100     \-114
\&T       \-123    \-31     \-114    91
.Ve
.PP
See Also   :
.SS "matrix"
.IX Subsection "matrix"
.Vb 10
\& Usage     : my $matrix = $blastz\->matrix();
\& Purpose   : gets a hash of the matrix used in blastz
\& Returns   : a hashref
\& Argument  : none
\& Throws    : carps if matrix has not been parsed
\& Comment   : hash structure:
\&$VAR1 = {
\&          \*(AqA\*(Aq => {
\&                   \*(AqA\*(Aq => \*(Aq91\*(Aq,
\&                   \*(AqT\*(Aq => \*(Aq\-123\*(Aq,
\&                   \*(AqC\*(Aq => \*(Aq\-114\*(Aq,
\&                   \*(AqG\*(Aq => \*(Aq\-31\*(Aq
\&                 },
\&          \*(AqT\*(Aq => {
\&                   \*(AqA\*(Aq => \*(Aq\-123\*(Aq,
\&                   \*(AqT\*(Aq => \*(Aq91\*(Aq,
\&                   \*(AqC\*(Aq => \*(Aq\-31\*(Aq,
\&                   \*(AqG\*(Aq => \*(Aq\-114\*(Aq
\&                 },
\&          \*(AqC\*(Aq => {
\&                   \*(AqA\*(Aq => \*(Aq\-114\*(Aq,
\&                   \*(AqT\*(Aq => \*(Aq\-31\*(Aq,
\&                   \*(AqC\*(Aq => \*(Aq100\*(Aq,
\&                   \*(AqG\*(Aq => \*(Aq\-125\*(Aq
\&                 },
\&          \*(AqG\*(Aq => {
\&                   \*(AqA\*(Aq => \*(Aq\-31\*(Aq,
\&                   \*(AqT\*(Aq => \*(Aq\-114\*(Aq,
\&                   \*(AqC\*(Aq => \*(Aq\-125\*(Aq,
\&                   \*(AqG\*(Aq => \*(Aq100\*(Aq
\&                 }
\&        };
.Ve
.PP
See Also   :
.SS "params"
.IX Subsection "params"
.Vb 6
\& Usage     : my $params = $self\->params();
\& Purpose   : get a hashref of the parameters used in the blastz run
\& Returns   : a hashref
\& Argument  : none
\& Throws    : carps if no parameters exist
\& Comment   : Example hashref:
.Ve
.PP
\&\f(CW$VAR1\fR = {
          'O' => '400',
          'M' => '50',
          'K' => '3000',
          'L' => '3000',
          'E' => '30'
        };
.PP
See Also   :
.SS "param_string"
.IX Subsection "param_string"
.Vb 7
\& Usage     : my $pstring = $blastz\->param_string();
\& Purpose   : gets a string of the blastz parameters (without matrix)
\& Returns   : a string
\& Argument  : none
\& Throws    : carps through \->params() if there are no parameters
\& Comment   : example string
\&           : E=30, K=3000, L=3000, M=50, O=400
.Ve
.PP
See Also   :
.SS "seq1_info"
.IX Subsection "seq1_info"
.Vb 12
\& Usage     : my $seq = $blastz\->seq1_info();
\& Purpose   : get sequence information for seq1 from a blastz run
\& Returns   : a CoGe::Accessory::blastz_report::seq object
\& Argument  : none
\& Throws    :
\& Comment   : the seq object has accessor functions for:
\&              file => file name
\&              start => start position
\&              stop => stop position
\&              length => length of sequence
\&              strand => strand used
\&              contig => something blastz uses when comparing contigs.  Not sure what this means, check blastz docs.
.Ve
.PP
See Also   :
.SS "seq2_info"
.IX Subsection "seq2_info"
.Vb 12
\& Usage     : my $seq = $blastz\->seq2_info();
\& Purpose   : get sequence information for seq2 from a blastz run
\& Returns   : a CoGe::Accessory::blastz_report::seq object
\& Argument  : none
\& Throws    :
\& Comment   : the seq object has accessor functions for:
\&              file => file name
\&              start => start position
\&              stop => stop position
\&              length => length of sequence
\&              strand => strand used
\&              contig => something blastz uses when comparing contigs.  Not sure what this means, check blastz docs.
.Ve
.PP
See Also   :
.SS ""
.IX Subsection ""
.Vb 7
\& Usage     :
\& Purpose   :
\& Returns   :
\& Argument  :
\& Throws    :
\& Comment   :
\&           :
.Ve
.PP
See Also   :
