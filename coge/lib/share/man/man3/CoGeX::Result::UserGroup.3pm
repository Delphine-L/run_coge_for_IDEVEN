.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.13)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "CoGeX::Result::UserGroup 3"
.TH CoGeX::Result::UserGroup 3 "2015-05-06" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
CoGeX::UserGroup
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This object uses the DBIx::Class to define an interface to the \f(CW\*(C`user_group\*(C'\fR table in the CoGe database.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SH "AUTHORS"
.IX Header "AUTHORS"
.Vb 2
\& Eric Lyons
\& Brent Pedersen
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
The full text of the license can be found in the
\&\s-1LICENSE\s0 file included with this module.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.SS "users"
.IX Subsection "users"
.Vb 6
\& Usage     :
\& Purpose   : Returns users objects
\& Returns   : wantArray of users objects
\& Argument  : None
\& Throws    : None
\& Comments  :
.Ve
.SS "has_member"
.IX Subsection "has_member"
.Vb 6
\& Usage     :
\& Purpose   : Check if group contains specified user
\& Returns   : 0 or 1
\& Argument  : user id or user object
\& Throws    : None
\& Comments  :
.Ve
.SS "owner"
.IX Subsection "owner"
.Vb 6
\& Usage     :
\& Purpose   : Returns user object
\& Returns   : user object
\& Argument  : None
\& Throws    : None
\& Comments  :
.Ve
.SS "is_editable"
.IX Subsection "is_editable"
.Vb 6
\& Usage     : is this group editable by the specified user?
\& Purpose   :
\& Returns   : 0 or 1
\& Argument  :
\& Throws    : None
\& Comments  :
.Ve
.SS "is_<\s-1ROLE\s0>"
.IX Subsection "is_<ROLE>"
.Vb 6
\& Usage     : does this group have the specified role?
\& Purpose   :
\& Returns   : 0 or 1
\& Argument  :
\& Throws    : None
\& Comments  :
.Ve
.SS "lists"
.IX Subsection "lists"
.Vb 6
\& Usage     :
\& Purpose   : Returns the set of lists associated with the user group
\& Returns   : wantArray of lists
\& Argument  : None
\& Throws    : None
\& Comments  :
.Ve
.SS "experiments"
.IX Subsection "experiments"
.Vb 6
\& Usage     :
\& Purpose   : Returns the set of experiments associated with the user group
\& Returns   : wantArray of experiments
\& Argument  : None
\& Throws    : None
\& Comments  :
.Ve
.SS "features"
.IX Subsection "features"
.Vb 6
\& Usage     :
\& Purpose   : Returns the set of features associate with the user group
\& Returns   : wantArray of features
\& Argument  : None
\& Throws    : None
\& Comments  :
.Ve
.SS "genomes"
.IX Subsection "genomes"
.Vb 6
\& Usage     :
\& Purpose   : Returns the set of genomes associated with the user group
\& Returns   : wantArray of genomes
\& Argument  : None
\& Throws    : None
\& Comments  :
.Ve
.SS "datasets"
.IX Subsection "datasets"
.Vb 6
\& Usage     :
\& Purpose   : Returns the set of datasets associated with the user group
\& Returns   : wantArray of datasets
\& Argument  : None
\& Throws    : None
\& Comments  :
.Ve
.SS "restricted_datasets"
.IX Subsection "restricted_datasets"
.Vb 6
\& Usage     : $self\->restricted_datasets
\& Purpose   : Returns the set of restricted datasets associated with the user group
\& Returns   : wantArray of datasets
\& Argument  : None
\& Throws    : None
\& Comments  :
.Ve
.SS "info"
.IX Subsection "info"
.Vb 6
\& Usage     : $self\->info
\& Purpose   : generate a string of information about the user group
\& Returns   : a string
\& Argument  : None
\& Throws    : None
\& Comments  : uses name, description and role
.Ve
.SS "info"
.IX Subsection "info"
.Vb 6
\& Usage     : $self\->info_html
\& Purpose   : generate a string of information about the user group
\& Returns   : a string wrapped with a linnk to GroupView
\& Argument  : None
\& Throws    : None
\& Comments  : uses name, description and role
.Ve
.SS "annotation_pretty_print_html"
.IX Subsection "annotation_pretty_print_html"
.Vb 8
\& Usage     : my $pretty_annotation_html = $feat\->annotation_pretty_print_html
\& Purpose   : returns a string with information and annotations about a user group
\&             in a nice html format with breaks and class tags (called "annotation")
\& Returns   : returns a string
\& Argument  : none
\& Throws    :
\& Comments  : uses Coge::Genome::Accessory::Annotation to build the annotations,
\&           : specifying delimters, and printing to string.   Pretty cool object.
.Ve
.PP
See Also   : CoGe::Accessory::Annotation
