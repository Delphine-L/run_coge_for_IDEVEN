.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.13)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "CoGe::Algos::Pairwise 3"
.TH CoGe::Algos::Pairwise 3 "2015-05-06" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
CoGe::Algos::Pairwise \- Pairwise
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 6
\&  use CoGe::Algos::Pairwise;
\&  my $seq1 = "PELICAN";
\&  my $seq2 = "CELLAICAN";
\&  my $pairwise = new CoGe::Algos::Pairwise
\&  $pairwise\->seqA($seq1);
\&  $pairwise\->seqB($seq2);
\&
\&  #align the sequence
\&  my ($align1, $align2) = $pairwise\->global_align();
\&
\&  #pretty print the dynamic programming matrix
\&  $pairwise\->print_dpm();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Stub documentation for this module was created by ExtUtils::ModuleMaker.
It looks like the author of the extension was negligent enough
to leave the stub unedited.
.PP
Blah blah blah.
.SH "USAGE"
.IX Header "USAGE"
.SH "BUGS"
.IX Header "BUGS"
.SH "SUPPORT"
.IX Header "SUPPORT"
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 4
\&        Eric Lyons
\&        CPAN ID: MODAUTHOR
\&        UC Berkeley
\&        elyons(@t)nature.berkeley.edu
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This program is free software licensed under the...
.PP
.Vb 1
\&        The Artistic License
.Ve
.PP
The full text of the license can be found in the
\&\s-1LICENSE\s0 file included with this module.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIperl\fR\|(1).
.SS "seqA"
.IX Subsection "seqA"
.Vb 7
\& Usage     : $pairwise\->seqA($seq)
\& Purpose   : get/set one of the sequences
\& Returns   : string
\& Argument  : string
\& Throws    : none
\& Comment   : this is how you set one of the two sequences to be aligned
\&           :
.Ve
.PP
See Also   :
.SS "seqB"
.IX Subsection "seqB"
.Vb 7
\& Usage     : $pairwise\->seqB($seq)
\& Purpose   : get/set one of the sequences
\& Returns   : string
\& Argument  : string
\& Throws    : none
\& Comment   : this is how you set one of the two sequences to be aligned
\&           :
.Ve
.PP
See Also   :
.SS "matrix"
.IX Subsection "matrix"
.Vb 9
\& Usage     : $pairwise\->matrix($matrix)
\& Purpose   : get/set the scoring matrix for the alignment
\& Returns   : a ref to a hash of hash refs
\& Argument  : a ref to a hash of hash refs
\& Throws    : none
\& Comment   : example matrix:  $matrix = {{A}=>{A=>1, T=>\-1, C=>\-1}, G=>\-1},
\&           :                             {T}=>{A=>\-1, T=>1, C=>\-1}, G=>\-1},
\&           :                             {C}=>{A=>\-1, T=>\-1, C=>1}, G=>\-1},
\&           :                             {G}=>{A=>\-1, T=>\-1, C=>\-1}, G=>1},};
\&
\&           : if no matrix is supplied, this will use the BLOSUM62 by default
.Ve
.SS "gap"
.IX Subsection "gap"
.Vb 7
\& Usage     : $pairwise\->gap(\-10)
\& Purpose   : get/set the gap opening cost
\& Returns   : string/int
\& Argument  : string/int
\& Throws    : 0
\& Comment   : If no gap is specified, \-10 is used by default
\&           :
.Ve
.PP
See Also   :
.SS "gap_ext"
.IX Subsection "gap_ext"
.Vb 7
\& Usage     : $pairwise\->gap_ext(\-2)
\& Purpose   : get/set the gap extension cost
\& Returns   : string/int
\& Argument  : string/int
\& Throws    : none
\& Comment   : If no gap extension is specified, \-2 is used by default
\&           :
.Ve
.PP
See Also   :
.SS "dpm"
.IX Subsection "dpm"
.Vb 9
\& Usage     : my $dpm = $pairwise\->dpm();
\& Purpose   : storage place for the dynamic programming matrix used for the last alignment
\& Returns   : a reference to a 2D matrix of hash refs
\& Argument  : this is set by the global_align subroutine
\& Throws    : none
\& Comment   : If you want to get a hold the the DPM used to generate the alignment, this
\&           : is the puppy.  However, if you want to see it printed pretty, see the
\&           : print_dpm sub.
\&See Also   : sub print_dpm
.Ve
.SS "alignA"
.IX Subsection "alignA"
.Vb 7
\& Usage     : $aligna = $pairwise\->alignA();
\& Purpose   : storage place for one of the aligned sequence post alignment
\& Returns   : a string (or nothing if not set)
\& Argument  : this is set by the alignment subroutine
\& Throws    : none
\& Comment   : Allows you to retrieve the alignment for one of the sequence
\&           : after the alignment has been run.
.Ve
.PP
See Also   :
.SS "alignB"
.IX Subsection "alignB"
.Vb 7
\& Usage     : $alignb = $pairwise\->alignB();
\& Purpose   : storage place for one of the aligned sequence post alignment
\& Returns   : a string (or nothing if not set)
\& Argument  : this is set by the alignment subroutine
\& Throws    : none
\& Comment   : Allows you to retrieve the alignment for one of the sequence
\&           : after the alignment has been run.
.Ve
.PP
See Also   :
.SS ""
.IX Subsection ""
.Vb 7
\& Usage     :
\& Purpose   :
\& Returns   :
\& Argument  :
\& Throws    :
\& Comment   :
\&           :
.Ve
.PP
See Also   :
.SS "global_align"
.IX Subsection "global_align"
.Vb 8
\& Usage     : $pairwise\->global_align()
\& Purpose   : aligns two sequences stored in the pairwise object.  The sequences must have been previously
\&             set with $pairwise\->seqA($seq) and $pairwise\->seqB($seq2)
\& Returns   : an array of two strings where each string is the global sequence alignment
\& Argument  : None
\& Throws    : returns 0 if either sequence is not defined
\& Comment   : This does a global sequence alignment between two sequences using gap and gap extension
\&           : penalties.
.Ve
.PP
See Also   :
.SS "print_dpm"
.IX Subsection "print_dpm"
.Vb 10
\& Usage     : $self\->print_dpm
\& Purpose   : pretty prints the dynamic programming matrix
\& Returns   : none
\& Argument  : none
\& Throws    : 0
\& Comment   : output is:  score:gap_flag:trace_direction
\&           : e.g.  \-10:1:up         \-3:0:dg        \-13:1:lt
\&           : lt = trace is from left cell
\&           : up = trace is from above cell
\&           : gd = trace is from above diagonal cell
.Ve
.PP
See Also   :
.SS "print_align"
.IX Subsection "print_align"
.Vb 8
\& Usage     : $pw\->print_align();
\& Purpose   : prints a pretty alignment
\& Returns   : none
\& Argument  : string (int) for the number of characters before wrapping the
\&           : alignment to the next string
\& Throws    : none
\& Comment   : a simple way to get a pretty and easy to read alignment
\&           :
.Ve
.PP
See Also   :
.SS "_initialize_default_scoring_matrix"
.IX Subsection "_initialize_default_scoring_matrix"
.Vb 7
\& Usage     : $pairwise\->_initialize_default_scoring_matrix
\& Purpose   : set the scoring matrix to BLOSOM62
\& Returns   : $self\->matrix()
\& Argument  : none
\& Throws    : none
\& Comment   : if no scoring matrix has been specified, this matrix is used
\&           :
.Ve
.PP
See Also   :
